<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Dynamic_Array_Stack" Id="{239d99aa-f4f9-4321-abec-5c6a5abe8474}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Dynamic_Array_Stack IMPLEMENTS I_Stack
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	fbDynamic_Array : FB_Dynamic_Array(10); 
	nTop_Index 		: DINT; 
	nSize 			: DINT;
	t_Null 			: T_DATA_TYPE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Empty" Id="{fa87acb0-b0c7-43d0-82f2-acce5786e297}">
      <Declaration><![CDATA[(* Empties/Clears/Deletes all elements on the stack*)
METHOD Empty
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.fbDynamic_Array.Clear(); 
THIS^.nSize := THIS^.fbDynamic_Array.Size();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{ff46d66b-6cbc-43d5-9f2b-1e037918795e}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	(* if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).*)
	bInCopyCode	: BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Empty();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{510d362e-ea79-47a8-a139-d006a1ad2918}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Is_Empty" Id="{69d70951-30f6-4452-b454-cf06deb6f448}">
      <Declaration><![CDATA[(* Checks of stack is empty.*)
METHOD Is_Empty : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Is_Empty := nSize = 0;
IF Is_Empty THEN THIS^.Empty(); END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Peek" Id="{4ae0b92b-6fab-4fce-b3ce-03083d3f2090}">
      <Declaration><![CDATA[(* Gets element at any position of the stack, without removing it.*)
METHOD Peek : T_DATA_TYPE
VAR_INPUT
	nPosition	: DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nPosition > THIS^.nSize - 1) THEN nPosition := -1; END_IF
Peek := THIS^.fbDynamic_Array.Access(nPosition);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pop" Id="{1abccd07-79df-4986-b5c4-a84e6ab4ee58}">
      <Declaration><![CDATA[(* Deletes/pops an element at the front of the stack *)
METHOD Pop : T_DATA_TYPE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Pop := THIS^.fbDynamic_Array.Access(THIS^.Size() - 1);
IF NOT(THIS^.Is_Empty()) THEN nSize := THIS^.Size() - 1; END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Push" Id="{269b6492-9168-4445-bdc0-67d94143a7f0}">
      <Declaration><![CDATA[(* Adds/pushes an element to the front of the stack *)
METHOD Push
VAR_INPUT
	Data	: T_DATA_TYPE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nSize := THIS^.Size() + 1;
THIS^.fbDynamic_Array.Insert(Data, THIS^.Size()-1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Show" Id="{d3ae43e4-1f60-4cc2-b99e-ec0a4a0fafd3}">
      <Declaration><![CDATA[(* Traverse the stack and display each element as an array. *)
METHOD Show
VAR_IN_OUT
	aList : ARRAY[*] OF T_DATA_TYPE; // Array to display data in list.
END_VAR
VAR
	i,j : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := LOWER_BOUND(aList, 1) TO UPPER_BOUND(aList, 1) DO
	IF j < TO_DINT(THIS^.Size()) AND NOT(THIS^.Is_Empty())THEN 
		aList[i] := THIS^.fbDynamic_Array.Access((THIS^.Size()-1) - j);
		j := j + 1;
	ELSE 
		aList[i] := THIS^.fbDynamic_Array.Access(-1); 
		END_IF
	END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Size" Id="{66804adb-3fc1-4e1f-aa5f-dcbbfdb89e0e}">
      <Declaration><![CDATA[(* Gets size of the stack*)
METHOD Size : DINT
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(THIS^.Is_Empty())THEN Size := THIS^.nSize; END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Top" Id="{fe007a43-b5a6-4da0-8ce3-2a3bedfdd486}">
      <Declaration><![CDATA[(* Reads/returns the data at the top of the stack without removing it. *)
METHOD Top : T_DATA_TYPE
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(THIS^.Is_Empty()) THEN Top := THIS^.fbDynamic_Array.Access(THIS^.nSize-1); END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Dynamic_Array_Stack">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Empty">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.FB_exit">
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Is_Empty">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Peek">
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Pop">
      <LineId Id="12" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Push">
      <LineId Id="13" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Show">
      <LineId Id="10" Count="0" />
      <LineId Id="16" Count="2" />
      <LineId Id="20" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Size">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Dynamic_Array_Stack.Top">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>